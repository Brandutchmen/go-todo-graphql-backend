package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"brandon/todo-gql/graph/model"
	"context"
	"crypto/rand"
	"fmt"
	"math/big"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	rand, _ := rand.Int(rand.Reader, big.NewInt(1000))
	todo := &model.Todo{
		Text:   input.Text,
		ID:     fmt.Sprintf("T%d", rand),
		Status: model.StatusPending,
		Done:   false,
	}
	r.todos = append(r.todos, todo)
	return todo, nil
}

// UpdateTodoStatus is the resolver for the updateTodoStatus field.
func (r *mutationResolver) UpdateTodoStatus(ctx context.Context, id string, status model.Status) (*model.Todo, error) {
	todo := &model.Todo{}
	for _, t := range r.todos {
		if t.ID == id {
			t.Status = status
      if status == model.StatusComplete {
        t.Done = true
      } else {
        t.Done = false
      }
			todo = t
		}
	}
  if todo.ID == "" {
    return nil, fmt.Errorf("todo not found")
  }
  return todo, nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
  return r.todos, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
